#include<stdio.h>
#include<string.h>

struct process_Struct 
{
    char process_name[20];
    int Arr_time, burst_time, completion_time, remaining;
}temp_Struct;


void faculty_Queue(int no_of_process) 
{

    int count, Arr_Time, burst_Time, time_quantum;
    struct process_Struct faculty_Process[no_of_process];  //array of structures
    int total_time, queue, round_robin[20];
    total_time = 0;
    queue = 0;
    round_robin[queue] = 0;
 
    count = 0;
    while(count < no_of_process) 
	{                                                         //Taking input from the user reagrding the faculty queue that is how many processes in the faculty queue
        printf("Enter Processes details[%d]", count+1); 		// name of the processes arrival and burst time of those processess etc.   
        puts("");
        printf("Process Name : ");
        scanf("%s", faculty_Process[count].process_name);

        printf("Arrival Time : ");
        scanf("%d", &faculty_Process[count].Arr_time);

        printf("Burst Time : ");
        scanf("%d", &faculty_Process[count].burst_time);    
        puts("");
	
	count++;
    }
    printf("Please enter the time quantum for Faculty queue : ");                 //time quantum especially used for round_robin scheduling algorithm.
    scanf("%d", &time_quantum);

    
    // Sorting the processes by their ARRIVAL time.
    // if the ARRIVAL time is same then scheduling is based on First Come First Serve.
    for(count = 0; count < no_of_process; count++)
	{
        int x;
		for(x = count +1; x < count; x++)
		{
            if(faculty_Process[count].Arr_time > faculty_Process[x].Arr_time) 
			{
                temp_Struct = faculty_Process[count];
                faculty_Process[count] = faculty_Process[x];
                faculty_Process[x] = temp_Struct;
            }
        }
    }

    // initialy when the process comes in the burst time is fully remaining and process completion is zero.
    for(count = 0; count < no_of_process; count++) 
	{
        faculty_Process[count].remaining = faculty_Process[count].burst_time;
        faculty_Process[count].completion_time = 0;
    }

    

    
    int flag, x, n, z, waiting_time=0;
    int turnaroundtime,average_turnaroundtime;
    do 
	{
        for(count = 0; count < no_of_process; count++)
		{
            if(total_time >= faculty_Process[count].Arr_time)
			{     	
                z = 0;
                for(x = 0; x <= queue; x++) 
				{
                    if(round_robin[x] == count) 
					{
                        z++;
                    }
                }
                if(z == 0) 
				{
                    queue++; 
                    round_robin[queue] == count;
                }
            }
        }

        if(queue == 0) 
		{
            n = 0;
        }
        if(faculty_Process[n].remaining == 0) 
		{
            n++ ;
        }
        if(n > queue) 
		{
            n = (n - 1) % queue;
        }
        if(n <= queue) 
		{
            if(faculty_Process[n].remaining > 0) 
			{
                if(faculty_Process[n].remaining < time_quantum)
				{
                    total_time += faculty_Process[n].remaining;
                    faculty_Process[n].remaining = 0;
                }
				else
				{
                    total_time += time_quantum;
                    faculty_Process[n].remaining -= time_quantum;
                }
                faculty_Process[n].completion_time = total_time;
            }
            n++;
        }
        flag = 0;
        
        for(count = 0; count < no_of_process; count++) 
		{
            if(faculty_Process[count].remaining > 0) 
			{
                flag++;
            }
        }
    }while(flag != 0);


    puts("\n");
    puts("\t\t ROUND ROBIN ALGORITHM OUTPUT \n");
    puts("\n");
    printf("\n Process_Name\t  \tArr Time\t  \tBurst Time\t \tCompltn Time \n");

    for(count = 0; count < no_of_process; count++){
        waiting_time = faculty_Process[count].completion_time - faculty_Process[count].burst_time - faculty_Process[count].Arr_time;
        printf("\n|\t  %s\t    |\t  %d\t   |\t  %d\t   |\t  %d\t   |\n", faculty_Process[count].process_name, faculty_Process[count].Arr_time, faculty_Process[count].burst_time, faculty_Process[count].completion_time);
        turnaroundtime = waiting_time + faculty_Process[count].burst_time;
        average_turnaroundtime = turnaroundtime/no_of_process;   
        printf(average_turnaroundtime);
	}
    

}


void student_Queue(int no_of_process) 
{

    int count, Arr_Time, burst_Time, time_quantum;
    struct process_Struct student_Process[no_of_process];		//similarly this is for students queue taking details about the processes in the same manner written
    int total_time, queue, round_robin[20];				//above for the faculty queue 
    total_time = 0;
    queue = 0;
    round_robin[queue] = 0;

    for(count = 0; count < no_of_process; count++) 
	{
        printf("Enter the details of Process[%d]", count+1);
        puts("");
        printf("Process Name : ");
        scanf("%s", student_Process[count].process_name);

        printf("Arrival Time : ");
        scanf("%d", &student_Process[count].Arr_time);

        printf("Burst Time : ");
        scanf("%d", &student_Process[count].burst_time);
    }
    printf("Please enter the time quantum for Student queue :  ");             //time quantum for the consideration of round robin algo
    scanf("%d", &time_quantum);

    
    // Sorting the processes by their ARRIVAL time.
    // if the ARRIVAL time is same then scheduling is based on First Come First Serve.
    for(count = 0; count < no_of_process; count++) 
	{
        int x;
		for(x = count +1; x < count; x++)
		{
            if(student_Process[count].Arr_time > student_Process[x].Arr_time)
			{
                temp_Struct = student_Process[count];
                student_Process[count] = student_Process[x];
                student_Process[x] = temp_Struct;
            }
        }
    }

    // initialy when the process comes in the burst time is fully remaining and process completion is zero.
    for(count = 0; count < no_of_process; count++) 
	{
        student_Process[count].remaining = student_Process[count].burst_time;
        student_Process[count].completion_time = 0;
    }
    
    int flag, x, n, z, waiting_time=0;
    int turnaroundtime,average_turnaroundtime;
    do 
	{
        for(count = 0; count < no_of_process; count++)
		{
            if(total_time >= student_Process[count].Arr_time)
			{     	
                z = 0;
                for(x = 0; x <= queue; x++) 
				{
                    if(round_robin[x] == count) 
					{
                        z++;
                    }
                }
                if(z == 0) 
				{
                    queue++; 
                    round_robin[queue] == count;
                }
            }
        }

        if(queue == 0) 
		{
            n = 0;
        }
        if(student_Process[n].remaining == 0) 
		{
            n++ ;
        }
        if(n > queue) 
		{
            n = (n - 1) % queue;
        }
        if(n <= queue) 
		{
            if(student_Process[n].remaining > 0) 
			{
                if(student_Process[n].remaining < time_quantum)
				{
                    total_time += student_Process[n].remaining;
                    student_Process[n].remaining = 0;
                }
				else
				{
                    total_time += time_quantum;
                    student_Process[n].remaining -=time_quantum;
                }
                student_Process[n].completion_time = total_time;
            }
            n++;
        }
        flag = 0;
        
        for(count = 0; count < no_of_process; count++) 
		{
            if(student_Process[count].remaining > 0) 
			{
                flag++;
            }
        }
    }while(flag != 0);


    puts("\n");
    puts("\t\t ROUND ROBIN ALGORITHM OUTPUT \n");
    puts("\n");
    printf("\n Process_Name\t  \tArr Time\t  \tBurst Time\t \tCompltn Time \n");

    for(count = 0; count < no_of_process; count++){
        waiting_time = student_Process[count].completion_time - student_Process[count].burst_time - student_Process[count].Arr_time;
        int turnaroundtime,average_turnaroundtimeeera;
        printf("\n|\t  %s\t    |\t  %d\t   |\t  %d\t   |\t  %d\t   |\n", student_Process[count].process_name, student_Process[count].Arr_time, student_Process[count].burst_time, student_Process[count].completion_time);
        turnaroundtime = waiting_time + student_Process[count].burst_time;
        average_turnaroundtime =turnaroundtime/no_of_process;   
        printf(average_turnaroundtime);
    }

}





int main(int argc, char const *argv[]) {
    int select_queue, no_of_process;

    puts("Please choose a queue : ");
    puts("1. Faculty queue.");
    puts("2. Student queue.");
    printf("> ");
    scanf("%d", &select_queue);

    if(select_queue == 1 ) 
	{
    
                printf("Enter no. of process for Faculty queue : ");
                scanf("%d", &no_of_process);
                
                faculty_Queue(no_of_process);
                
    }
	else if(select_queue == 2)
    {
	            printf("Enter no. of process for Student queue : ");
                scanf("%d", &no_of_process);

                student_Queue(no_of_process);
	}
            

    else
	{
	 
                printf("Please select again from the above 2 options.");
    }

    return 0;
}
